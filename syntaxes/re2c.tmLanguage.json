{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "re2c",
    "scopeName": "source.re2c",
    "injectionSelector": "L:source",
    "patterns": [{
        "include": "#blocks"
    }],
    "repository": {
        "blocks": {
            "comment": "Definition of re2c blocks.",
            "patterns": [
                {
                    "comment": "Block followed by only one identifier.",
                    "begin": "\\s*(/\\*)(!)(?:(local|rules|use)(:))?(re2c)\\b(?:(:)([A-Za-z_][A-Za-z_0-9]*))?",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.comment.begin.c" },
                        "2": { "name": "punctuation.definition.directive.re2c" },
                        "3": {
                            "patterns": [
                                {
                                    "match": "local|rules",
                                    "name": "storage.modifier.$0.re2c"
                                },
                                {
                                    "match": "use",
                                    "name": "keyword.control.directive.$0.re2c"
                                }
                            ]
                        },
                        "4": { "name": "punctuation.separator.colon.re2c" },
                        "5": { "name": "storage.type.re2c" },
                        "6": { "name": "punctuation.separator.colon.re2c" },
                        "7": { "name": "entity.name.type.block.re2c" }
                    },
                    "end": "\\s*(\\*/)",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.comment.end.c" }
                    },
                    "patterns": [{
                        "include": "#statements"
                    }]
                },
                {
                    "comment": "Block followed by any number of identifiers.",
                    "begin": "\\s*(/\\*)(!)(max|maxnmatch|stags|mtags|getstate|conditions|svars|mvars)(:)(re2c)\\b((?::[A-Za-z_][A-Za-z_0-9]*)*)",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.comment.begin.c" },
                        "2": { "name": "punctuation.definition.directive.re2c" },
                        "3": { "name": "keyword.control.directive.$3.re2c" },
                        "4": { "name": "punctuation.separator.colon.re2c" },
                        "5": { "name": "storage.type.re2c" },
                        "6": {
                            "patterns": [
                                {
                                    "match": ":",
                                    "name": "punctuation.separator.colon.re2c"
                                },
                                {
                                    "match": "[A-Za-z_][A-Za-z_0-9]*",
                                    "name": "entity.name.type.block.re2c"
                                }
                            ]
                        }
                    },
                    "end": "\\s*(\\*/)",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.comment.end.c" }
                    },
                    "patterns": [{
                        "include": "#statements"
                    }]
                },
                {
                    "comment": "Block followed by string.",
                    "begin": "\\s*(/\\*)(!)(include)(:)(re2c)\\s*(?:(\")((?:\\\\\"|[^\"\n])*)(\"))?",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.comment.begin.c" },
                        "2": { "name": "punctuation.definition.directive.re2c" },
                        "3": { "name": "keyword.control.directive.$3.re2c" },
                        "4": { "name": "punctuation.separator.colon.re2c" },
                        "5": { "name": "storage.type.re2c" },
                        "6": { "name": "string.quoted.double.re2c punctuation.definition.string.begin.re2c" },
                        "7": {
                            "name": "string.quoted.double.re2c",
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        },
                        "8": { "name": "string.quoted.double.re2c punctuation.definition.string.end.re2c" }
                    },
                    "end": "\\s*(\\*/)",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.comment.end.c" }
                    },
                    "patterns": [{
                        "include": "#statements"
                    }]
                },
                {
                    "comment": "Block followed by on/off.",
                    "begin": "\\s*(/\\*)(!)(header)(:)(re2c)(?:(:)(on|off)\\b)?",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.comment.begin.c" },
                        "2": { "name": "punctuation.definition.directive.re2c" },
                        "3": { "name": "keyword.control.directive.$0.re2c" },
                        "4": { "name": "punctuation.separator.colon.re2c" },
                        "5": { "name": "storage.type.re2c" },
                        "6": { "name": "punctuation.separator.colon.re2c" },
                        "7": { "name": "constant.language.$7.re2c" }
                    },
                    "end": "\\s*(\\*/)",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.comment.end.c" }
                    },
                    "patterns": [{
                        "include": "#statements"
                    }]
                },
                {
                    "comment": "Block followed by nothing.",
                    "begin": "\\s*(/\\*)(!)(types|ignore)(:)(re2c)\\b",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.comment.begin.c" },
                        "2": { "name": "punctuation.definition.directive.re2c" },
                        "3": { "name": "keyword.control.directive.$3.re2c" },
                        "4": { "name": "punctuation.separator.colon.re2c" },
                        "5": { "name": "storage.type.re2c" }
                    },
                    "end": "\\s*(\\*/)",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.comment.end.c" }
                    },
                    "patterns": [{
                        "include": "#statements"
                    }]
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "comment": "Comments within re2c.",
                    "match": "(//).*",
                    "name": "comment.line.re2c",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.begin.re2c"
                        }
                    }
                },
                {
                    "comment": "Use directive.",
                    "match": "(!)(use)(?:(:)([A-Za-z_][A-Za-z_0-9]*))?",
                    "captures": {
                        "1": { "name": "punctuation.definition.directive.re2c" },
                        "2": { "name": "keyword.control.directive.$2.re2c" },
                        "3": { "name": "punctuation.separator.colon.re2c" },
                        "4": { "name": "entity.name.type.block.re2c" }
                    }
                },
                {
                    "comment": "Include directive.",
                    "match": "(!)(include)\\b",
                    "captures": {
                        "1": { "name": "punctuation.definition.directive.re2c" },
                        "2": { "name": "keyword.control.directive.$2.re2c" }
                    }
                },
                {
                    "comment": "Configuration statement.",
                    "match": "(re2c)((?::[A-Za-z_][A-Za-z_0-9]*)*)(:)([A-Za-z_][-@A-Za-z_0-9]*)\\s*(=)?\\s*((?:\"(?:\\\\\"|[^\"\n])*\")|[^;\n]*)?(;)?",
                    "captures": {
                        "1": { "name": "storage.type.re2c" },
                        "2": {
                            "patterns": [
                                {
                                    "match": ":",
                                    "name": "punctuation.separator.colon.re2c"
                                },
                                {
                                    "match": "[A-Za-z_][A-Za-z_0-9]*",
                                    "name": "variable.language.setting.re2c"
                                }
                            ]
                        },
                        "3": { "name": "punctuation.separator.colon.re2c" },
                        "4": { "name": "variable.language.setting.re2c" },
                        "5": { "name": "keyword.operator.re2c" },
                        "6": {
                            "patterns": [
                                {
                                    "match": "(\")((?:\\\\\"|[^\"\n])*)(\")",
                                    "name": "string.quoted.double.re2c",
                                    "captures": {
                                        "1": { "name": "punctuation.definition.string.begin.re2c" },
                                        "2": {
                                            "patterns": [{
                                                "include": "#escapes"
                                            }]
                                        },
                                        "3": { "name": "punctuation.definition.string.end.re2c" }
                                    }
                                },
                                {
                                    "match": "[A-Za-z_][-A-Za-z_0-9]*",
                                    "name": "string.unquoted.re2c"
                                },
                                {
                                    "match": "[0-9][A-Za-z_0-9]*",
                                    "name": "constant.numeric.re2c"
                                }
                            ]
                        },
                        "7": { "name": "punctuation.terminator.statement.re2c" }
                    }
                },
                {
                    "comment": "Definition statement.",
                    "match": "([A-Za-z_][A-Za-z_0-9]*)\\s*(=)",
                    "captures": {
                        "1": { "name": "variable.name.re2c" },
                        "2": { "name": "keyword.operator.re2c" }
                    }
                },
                {
                    "include": "#regex"
                },
                {
                    "comment": "Statement terminator.",
                    "match": ";",
                    "name": "punctuation.terminator.statement.re2c"
                }
            ]
        },
        "regex": {
            "patterns": [
                {
                    "comment": "Case-sensitive string literal.",
                    "match": "(\")((?:\\\\\"|[^\"\n])*)(\")",
                    "name": "string.quoted.double.re2c",
                    "captures": {
                        "1": { "name": "punctuation.definition.string.begin.re2c" },
                        "2": {
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        },
                        "3": { "name": "punctuation.definition.string.end.re2c" }
                    }
                },
                {
                    "comment": "Case-insensitive string literal.",
                    "match": "(')((?:\\\\'|[^'\n])*)(')",
                    "name": "string.quoted.single.re2c",
                    "captures": {
                        "1": { "name": "punctuation.definition.string.begin.re2c" },
                        "2": {
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        },
                        "3": { "name": "punctuation.definition.string.end.re2c" }
                    }
                },
                {
                    "comment": "Character class.",
                    "match": "(\\[)((?:\\\\\\]|[^\\]\n])*)(])",
                    "captures": {
                        "1": { "name": "punctuation.definition.character-class.begin.re2c" },
                        "2": {
                            "name": "constant.other.character-class.re2c",
                            "patterns": [
                                {
                                    "match": "(?<=\\[)\\^",
                                    "name": "keyword.operator.negate.re2c"
                                },
                                {
                                    "match": "(?<=[^\\[])-(?=.)",
                                    "name": "keyword.operator.range.re2c"
                                },
                                {
                                    "include": "#escapes"
                                }
                            ]
                        },
                        "3": { "name": "punctuation.definition.character-class.end.re2c" }
                    }
                },
                {
                    "comment": "Repetition.",
                    "match": "({)([0-9]+(?:,[0-9]*)?)(})",
                    "captures": {
                        "1": { "name": "punctuation.definition.repetition.begin.re2c" },
                        "2": {
                            "patterns": [
                                {
                                    "match": ",",
                                    "name": "punctuation.separator.repetition.re2c"
                                },
                                {
                                    "match": "[0-9]+",
                                    "name": "constant.numeric.re2c"
                                }
                            ]
                        },
                        "3": { "name": "punctuation.definition.repetition.begin.re2c" }
                    }
                },
                {
                    "comment": "Tag.",
                    "match": "(@|#)([A-Za-z_][A-Za-z_0-9]*)",
                    "name": "keyword.operator.tag.re2c"
                },
                {
                    "comment": "Reference.",
                    "match": "[A-Za-z_][A-Za-z_0-9]*",
                    "name": "variable.name.re2c"
                },
                {
                    "comment": "Various operators.",
                    "match": "\\.|\\\\|\\*|\\+|\\?|!|\\||/",
                    "name": "keyword.operator.other.re2c"
                },
                {
                    "comment": "Various punctuators.",
                    "match": "\\(|\\)|{|}",
                    "name": "punctuation.other.re2c"
                }
            ]
        },
        "escapes": {
            "patterns": [
                {
                    "match": "\\\\(a|b|f|n|r|t|v|\\\\|\"|'|])",
                    "name": "constant.character.escape.re2c"
                },
                {
                    "match": "\\\\[0-7]{1,3}",
                    "name": "constant.character.escape.re2c"
                },
                {
                    "match": "\\\\x[A-Fa-f0-9]{2}",
                    "name": "constant.character.escape.re2c"
                },
                {
                    "match": "\\\\u[A-Fa-f0-9]{4}",
                    "name": "constant.character.escape.re2c"
                },
                {
                    "match": "\\\\U[A-Fa-f0-9]{8}",
                    "name": "constant.character.escape.re2c"
                },
                {
                    "match": "\\\\",
                    "name": "invalid.illegal.escape.re2c"
                }
            ]
        }
    }
}
